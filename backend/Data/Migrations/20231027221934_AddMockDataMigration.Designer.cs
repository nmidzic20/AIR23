// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231027221934_AddMockDataMigration")]
    partial class AddMockDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("OwnedById")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnedById");

                    b.ToTable("Card");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            OwnedById = 1,
                            Value = "0x1A2B3C4F5D6E"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            OwnedById = 2,
                            Value = "0x4F5D6E1A2B3C"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            OwnedById = 2,
                            Value = "0x7F8A9D4F5D6E"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            OwnedById = 3,
                            Value = "0x7F8A9D1A2B3C"
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.Charger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastSyncAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Charger");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2023, 10, 28, 0, 19, 33, 945, DateTimeKind.Local).AddTicks(4795),
                            CreatedById = 1,
                            LastSyncAt = new DateTime(2023, 10, 28, 1, 19, 33, 945, DateTimeKind.Local).AddTicks(4799),
                            Latitude = 46.309735000000003,
                            Longitude = 16.348593000000001,
                            Name = "Charger Dorm"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTime(2023, 10, 28, 0, 19, 33, 945, DateTimeKind.Local).AddTicks(4804),
                            CreatedById = 1,
                            LastSyncAt = new DateTime(2023, 10, 28, 2, 19, 33, 945, DateTimeKind.Local).AddTicks(4807),
                            Latitude = 46.287309,
                            Longitude = 16.321732999999998,
                            Name = "Charger Mobilisis"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreatedAt = new DateTime(2023, 10, 28, 0, 19, 33, 945, DateTimeKind.Local).AddTicks(4811),
                            CreatedById = 1,
                            LastSyncAt = new DateTime(2023, 10, 28, 3, 19, 33, 945, DateTimeKind.Local).AddTicks(4814),
                            Latitude = 46.307789999999997,
                            Longitude = 16.338061,
                            Name = "Charger FOI"
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("ChargerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("VolumeKwh")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ChargerId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            ChargerId = 1,
                            EndedAt = new DateTime(2023, 10, 28, 0, 49, 33, 945, DateTimeKind.Local).AddTicks(4845),
                            StartedAt = new DateTime(2023, 10, 27, 22, 19, 33, 945, DateTimeKind.Local).AddTicks(4841),
                            VolumeKwh = 9.8000000000000007
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2,
                            ChargerId = 1,
                            EndedAt = new DateTime(2023, 10, 28, 0, 59, 33, 945, DateTimeKind.Local).AddTicks(4853),
                            StartedAt = new DateTime(2023, 10, 27, 23, 19, 33, 945, DateTimeKind.Local).AddTicks(4850),
                            VolumeKwh = 7.2000000000000002
                        },
                        new
                        {
                            Id = 3,
                            CardId = 2,
                            ChargerId = 2,
                            EndedAt = new DateTime(2023, 10, 28, 0, 54, 33, 945, DateTimeKind.Local).AddTicks(4859),
                            StartedAt = new DateTime(2023, 10, 27, 22, 19, 33, 945, DateTimeKind.Local).AddTicks(4856),
                            VolumeKwh = 5.0999999999999996
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4,
                            ChargerId = 2,
                            EndedAt = new DateTime(2023, 10, 28, 1, 4, 33, 945, DateTimeKind.Local).AddTicks(4866),
                            StartedAt = new DateTime(2023, 10, 27, 23, 19, 33, 945, DateTimeKind.Local).AddTicks(4863),
                            VolumeKwh = 14.6
                        },
                        new
                        {
                            Id = 5,
                            CardId = 4,
                            ChargerId = 3,
                            EndedAt = new DateTime(2023, 10, 28, 1, 14, 33, 945, DateTimeKind.Local).AddTicks(4873),
                            StartedAt = new DateTime(2023, 10, 27, 21, 19, 33, 945, DateTimeKind.Local).AddTicks(4870),
                            VolumeKwh = 11.300000000000001
                        },
                        new
                        {
                            Id = 6,
                            CardId = 1,
                            ChargerId = 1,
                            EndedAt = new DateTime(2023, 10, 28, 0, 44, 33, 945, DateTimeKind.Local).AddTicks(4879),
                            StartedAt = new DateTime(2023, 10, 27, 21, 19, 33, 945, DateTimeKind.Local).AddTicks(4876),
                            VolumeKwh = 7.5
                        },
                        new
                        {
                            Id = 7,
                            CardId = 1,
                            ChargerId = 2,
                            EndedAt = new DateTime(2023, 10, 28, 0, 59, 33, 945, DateTimeKind.Local).AddTicks(4886),
                            StartedAt = new DateTime(2023, 10, 27, 20, 19, 33, 945, DateTimeKind.Local).AddTicks(4883),
                            VolumeKwh = 8.9000000000000004
                        },
                        new
                        {
                            Id = 8,
                            CardId = 3,
                            ChargerId = 3,
                            EndedAt = new DateTime(2023, 10, 28, 1, 9, 33, 945, DateTimeKind.Local).AddTicks(4893),
                            StartedAt = new DateTime(2023, 10, 27, 22, 19, 33, 945, DateTimeKind.Local).AddTicks(4890),
                            VolumeKwh = 10.199999999999999
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2023, 10, 28, 0, 19, 33, 945, DateTimeKind.Local).AddTicks(4628),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "123456",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTime(2023, 10, 28, 1, 19, 33, 945, DateTimeKind.Local).AddTicks(4686),
                            Email = "user@gmail.com",
                            FirstName = "User",
                            LastName = "User",
                            Password = "123456",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreatedAt = new DateTime(2023, 10, 28, 2, 19, 33, 945, DateTimeKind.Local).AddTicks(4692),
                            Email = "john.doe@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "123456",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.Card", b =>
                {
                    b.HasOne("backend.Models.Entities.User", "OwnedBy")
                        .WithMany()
                        .HasForeignKey("OwnedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnedBy");
                });

            modelBuilder.Entity("backend.Models.Entities.Charger", b =>
                {
                    b.HasOne("backend.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("backend.Models.Entities.Event", b =>
                {
                    b.HasOne("backend.Models.Entities.Card", "Card")
                        .WithMany("Events")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.Charger", "Charger")
                        .WithMany("Events")
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Charger");
                });

            modelBuilder.Entity("backend.Models.Entities.User", b =>
                {
                    b.HasOne("backend.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Models.Entities.Card", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("backend.Models.Entities.Charger", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
