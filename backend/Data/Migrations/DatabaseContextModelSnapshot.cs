// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("OwnedById")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnedById");

                    b.ToTable("Card");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            OwnedById = 1,
                            Value = "0x1A2B3C4F5D6E"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            OwnedById = 2,
                            Value = "0x4F5D6E1A2B3C"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            OwnedById = 2,
                            Value = "0x7F8A9D4F5D6E"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            OwnedById = 3,
                            Value = "0x7F8A9D1A2B3C"
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.Charger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastSyncAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Charger");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2023, 11, 8, 14, 41, 33, 861, DateTimeKind.Utc).AddTicks(7596),
                            CreatedById = 1,
                            LastSyncAt = new DateTime(2023, 11, 8, 15, 41, 33, 861, DateTimeKind.Utc).AddTicks(7600),
                            Latitude = 46.309735000000003,
                            Longitude = 16.348593000000001,
                            Name = "Charger Dorm"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTime(2023, 11, 8, 14, 41, 33, 861, DateTimeKind.Utc).AddTicks(7609),
                            CreatedById = 1,
                            LastSyncAt = new DateTime(2023, 11, 8, 16, 41, 33, 861, DateTimeKind.Utc).AddTicks(7610),
                            Latitude = 46.287309,
                            Longitude = 16.321732999999998,
                            Name = "Charger Mobilisis"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreatedAt = new DateTime(2023, 11, 8, 14, 41, 33, 861, DateTimeKind.Utc).AddTicks(7612),
                            CreatedById = 1,
                            LastSyncAt = new DateTime(2023, 11, 8, 17, 41, 33, 861, DateTimeKind.Utc).AddTicks(7613),
                            Latitude = 46.307789999999997,
                            Longitude = 16.338061,
                            Name = "Charger FOI"
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("ChargerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("VolumeKwh")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ChargerId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            ChargerId = 1,
                            EndedAt = new DateTime(2023, 11, 8, 15, 11, 33, 861, DateTimeKind.Utc).AddTicks(7640),
                            StartedAt = new DateTime(2023, 11, 8, 12, 41, 33, 861, DateTimeKind.Utc).AddTicks(7639),
                            VolumeKwh = 9.8000000000000007
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2,
                            ChargerId = 1,
                            EndedAt = new DateTime(2023, 11, 8, 15, 21, 33, 861, DateTimeKind.Utc).AddTicks(7644),
                            StartedAt = new DateTime(2023, 11, 8, 13, 41, 33, 861, DateTimeKind.Utc).AddTicks(7643),
                            VolumeKwh = 7.2000000000000002
                        },
                        new
                        {
                            Id = 3,
                            CardId = 2,
                            ChargerId = 2,
                            EndedAt = new DateTime(2023, 11, 8, 15, 16, 33, 861, DateTimeKind.Utc).AddTicks(7654),
                            StartedAt = new DateTime(2023, 11, 8, 12, 41, 33, 861, DateTimeKind.Utc).AddTicks(7646),
                            VolumeKwh = 5.0999999999999996
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4,
                            ChargerId = 2,
                            EndedAt = new DateTime(2023, 11, 8, 15, 26, 33, 861, DateTimeKind.Utc).AddTicks(7658),
                            StartedAt = new DateTime(2023, 11, 8, 13, 41, 33, 861, DateTimeKind.Utc).AddTicks(7657),
                            VolumeKwh = 14.6
                        },
                        new
                        {
                            Id = 5,
                            CardId = 4,
                            ChargerId = 3,
                            EndedAt = new DateTime(2023, 11, 8, 15, 36, 33, 861, DateTimeKind.Utc).AddTicks(7660),
                            StartedAt = new DateTime(2023, 11, 8, 11, 41, 33, 861, DateTimeKind.Utc).AddTicks(7659),
                            VolumeKwh = 11.300000000000001
                        },
                        new
                        {
                            Id = 6,
                            CardId = 1,
                            ChargerId = 1,
                            EndedAt = new DateTime(2023, 11, 8, 15, 6, 33, 861, DateTimeKind.Utc).AddTicks(7856),
                            StartedAt = new DateTime(2023, 11, 8, 11, 41, 33, 861, DateTimeKind.Utc).AddTicks(7855),
                            VolumeKwh = 7.5
                        },
                        new
                        {
                            Id = 7,
                            CardId = 1,
                            ChargerId = 2,
                            EndedAt = new DateTime(2023, 11, 8, 15, 21, 33, 861, DateTimeKind.Utc).AddTicks(7860),
                            StartedAt = new DateTime(2023, 11, 8, 10, 41, 33, 861, DateTimeKind.Utc).AddTicks(7859),
                            VolumeKwh = 8.9000000000000004
                        },
                        new
                        {
                            Id = 8,
                            CardId = 3,
                            ChargerId = 3,
                            EndedAt = new DateTime(2023, 11, 8, 15, 31, 33, 861, DateTimeKind.Utc).AddTicks(7863),
                            StartedAt = new DateTime(2023, 11, 8, 12, 41, 33, 861, DateTimeKind.Utc).AddTicks(7862),
                            VolumeKwh = 10.199999999999999
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpiresAt = new DateTime(2023, 11, 9, 14, 41, 33, 517, DateTimeKind.Utc).AddTicks(1763),
                            Token = "0x1A2B3C4F5D6EAES3DF4FFDE4"
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RefreshTokenId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RefreshTokenId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2023, 11, 8, 14, 41, 33, 517, DateTimeKind.Utc).AddTicks(1799),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "AQAAAAIAAYagAAAAEPEKcsvV0vlnV44MA9nUyjPxBA1lJUXrsJfs5R6SKleD44BeLLXV30oa/F3+zLx7Eg==",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTime(2023, 11, 8, 15, 41, 33, 631, DateTimeKind.Utc).AddTicks(9182),
                            Email = "user@gmail.com",
                            FirstName = "User",
                            LastName = "User",
                            Password = "AQAAAAIAAYagAAAAEFlWiar2dxRyzl26eF7iS9qeHnMB20Z6JAL+sM9sJHX8uHoA+jivQ+mqW0RVsCmGbQ==",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreatedAt = new DateTime(2023, 11, 8, 16, 41, 33, 750, DateTimeKind.Utc).AddTicks(4619),
                            Email = "john.doe@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "AQAAAAIAAYagAAAAEE0LVQ5mGf8bCCIJ/r3vv4TD3w+MkMgw+wXZIYveI7zwcBJWWdFs9AmwNwOlHpcfNw==",
                            RefreshTokenId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("backend.Models.Entities.Card", b =>
                {
                    b.HasOne("backend.Models.Entities.User", "OwnedBy")
                        .WithMany()
                        .HasForeignKey("OwnedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnedBy");
                });

            modelBuilder.Entity("backend.Models.Entities.Charger", b =>
                {
                    b.HasOne("backend.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("backend.Models.Entities.Event", b =>
                {
                    b.HasOne("backend.Models.Entities.Card", "Card")
                        .WithMany("Events")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.Charger", "Charger")
                        .WithMany("Events")
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Charger");
                });

            modelBuilder.Entity("backend.Models.Entities.User", b =>
                {
                    b.HasOne("backend.Models.Entities.RefreshToken", "RefreshToken")
                        .WithMany()
                        .HasForeignKey("RefreshTokenId");

                    b.HasOne("backend.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefreshToken");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Models.Entities.Card", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("backend.Models.Entities.Charger", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
